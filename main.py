import telebot, wikipedia, re,logging, time, sqlite3
from telebot import types

#pip install pyTelegramBotAPI

bot = telebot.TeleBot('6077737981:AAEqwrGN5xk7sWt6jmTuy-5QxC4QPbK199o')

conn = sqlite3.connect('school.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, user_name TEXT, user_surname TEXT, username TEXT, datetime INTEGER)')

cursor.execute('CREATE TABLE IF NOT EXISTS Records (id INTEGER PRIMARY KEY, user_name TEXT, user_surname TEXT, username TEXT, Records TEXT, datetime INTEGER)')

cursor.execute('CREATE TABLE IF NOT EXISTS Photo (id INTEGER PRIMARY KEY, user_name TEXT, user_surname TEXT, username TEXT, Photo BLOB, datetime INTEGER)')

wikipedia.set_lang("ru")

@bot.message_handler(commands=['start'])
def menu1(message):
    #us_id = message.from_user.id
    us_name = message.from_user.first_name
    us_sname = message.from_user.last_name
    username = message.from_user.username
    logging.info(f'{time.asctime()}')
    Datetime = (f'{time.strftime("%d-%m-%y %H:%M:%S")}')
    cursor.execute("INSERT INTO users (user_name, user_surname, username, datetime) VALUES (?, ?, ?, ?)", ( us_name, us_sname, username, Datetime))
    conn.commit()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
    menu = types.KeyboardButton('/menu')
    start = types.KeyboardButton('/interesting')
    markup.add(menu, start)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é!", reply_markup=markup)


#–ö–æ–º–º–∞–Ω–¥—ã –ë–æ—Ç—É
@bot.message_handler(commands=["menu"])
def menu_glavnoe(message):
    start_markup = types.InlineKeyboardMarkup()

    btn1= types.InlineKeyboardButton('–∫–∞–∫–æ–π —Å–µ–π—á–∞—Å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏?', callback_data = '2')
    btn3= types.InlineKeyboardButton('–°–∞–π—Ç –õ–∏—Ü–µ—è', url="https://rtlguboglo.edu-cl.net/")
    start_markup.row(btn1, btn3)

    btn4= types.InlineKeyboardButton('—Ñ–æ—Ç–æ', callback_data = '3')
    btn6= types.InlineKeyboardButton('id', callback_data = '4')
    btn8= types.InlineKeyboardButton('about', callback_data = '5')
    start_markup.row(btn4, btn6, btn8)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å, –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ)", reply_markup=start_markup)


@bot.message_handler(commands=["interesting"])
def write(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–ü—Ä–∏–≤–µ—Ç', callback_data = 'Hello')
    button2 = types.InlineKeyboardButton('–ö–∞–∫ –¥–µ–ª–∞?', callback_data = 'dela')
    button3 = types.InlineKeyboardButton('–°–∫–∏–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='raspisanie_segodnea')
    button4 = types.InlineKeyboardButton('–ö–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è –º–µ–Ω—é?', callback_data='menu_segodnea')
    markup.row(button1, button2)
    markup.row(button3, button4)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å, –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ)", reply_markup=markup)


@bot.callback_query_handler(func = lambda call: True)
def answer(call):
    if call.data == '1':
        bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç –õ–∏—Ü–µ—è: https://rtlguboglo.edu-cl.net/')
    elif call.data == '2':
        logging.info(f'{time.asctime()}')
        bot.send_message(call.message.chat.id, f'{time.strftime("Today is %A.")}')
    elif call.data == 'Hello':
        bot.send_message(call.message.chat.id, "–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—ÇüòÄ")
    elif call.data == '—Ñ–æ—Ç–æ':
        bot.send_message(call.message.chat.id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ù–∞–ø–∏—à–∏—Ç–µ –ò–º—è, –§–∞–º–∏–ª–∏—é –∏ –ö–ª–∞—Å")
    elif call.data == '3':
        photo = open('teacers.png', 'rb')
        bot.send_photo(call.message.chat.id, photo)
    elif call.data == 'dela':
        bot.send_message(call.message.chat.id, '–î–µ–ª–∞ –æ—Ç–ª–∏—á–Ω–æ, –¥—É–º–∞—é –æ —Ä–∞–∑–≤–∏—Ç–∏–∏üòé')
    elif call.data == 'raspisanie_segodnea':
        logging.info(f'{time.asctime()}')
        if (f'{time.strftime("%A")}') == "Monday":
            photo = open('Monday.png', 'rb')
            bot.send_message(call.message.chat.id, f'–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:')
            bot.send_photo(call.message.chat.id, photo)
        elif (f'{time.strftime("%A")}') == "Tuesday":
            photo = open('Tuesday.png', 'rb')
            bot.send_message(call.message.chat.id, f'–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫:')
            bot.send_photo(call.message.chat.id, photo)
        elif (f'{time.strftime("%A")}') == "Wednesday":
            photo = open('Wednesday.png', 'rb')
            bot.send_message(call.message.chat.id, f'–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ä–µ–¥—É:')
            bot.send_photo(call.message.chat.id, photo)
        elif (f'{time.strftime("%A")}') == "Thursday":
            photo = open('Thursday.png', 'rb')
            bot.send_message(call.message.chat.id, f'–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥:')
            bot.send_photo(call.message.chat.id, photo)
        elif (f'{time.strftime("%A")}') == "Friday":
            photo = open('Friday.png', 'rb')
            bot.send_message(call.message.chat.id, f'–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É:')
            bot.send_photo(call.message.chat.id, photo)
        else:
            bot.send_message(call.message.chat.id, "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!")
    elif call.data == '4':
        bot.send_message(call.message.chat.id, f"–¢–≤–æ–π ID: {call.message.from_user.id}", parse_mode='html')
    elif call.data == 'menu_segodnea':
        if (f'{time.strftime("%A")}') == "Monday":
            bot.send_message(call.message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –æ–∂–∏–¥–∞–∞–µ—Ç –º–æ–ª–æ—á–Ω–∞—è –∫–∞—à–∞üòú')
        elif (f'{time.strftime("%A")}') == "Tuesday":
            bot.send_message(call.message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –æ–∂–∏–¥–∞–∞–µ—Ç –ø–ª–æ–≤ —Å –º—è—Å–æ–ºüòú')
        elif (f'{time.strftime("%A")}') == "Wednesday":
            bot.send_message(call.message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –æ–∂–∏–¥–∞–∞–µ—Ç –∫–∞—Ä—Ç–æ—à–∫–∞ –ø—é—Ä–µ —Å —Å–∞–ª–∞—Ç–æ–ºüòú')
        elif (f'{time.strftime("%A")}') == "Thursday":
            bot.send_message(call.message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –æ–∂–∏–¥–∞—é—Ç –º–∞–∫–∞—Ä–æ–Ω—ã —Å —Ç–≤–æ—Ä–æ–≥–æ–ºüòú')
        elif (f'{time.strftime("%A")}') == "Friday":
            bot.send_message(call.message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –æ–∂–∏–¥–∞–∞–µ—Ç –≥—Ä–µ—á–∫–∞ —Å –∫–∞—Ç–ª–µ—Ç–∫–æ–πüòú')
        else:
            bot.send_message(call.message.chat.id, "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!")
    elif call.data == '5':
        bot.send_message(call.message.chat.id, '–î–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–ª —É—á–µ–Ω–∏–∫ 12–ê –∫–ª–∞—Å—Å–∞ –ö—É—Å—É—Ä—Å—É–∑ –ú–∞–∫—Å–∏–º')
    else:
        bot.send_message(call.message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')


@bot.message_handler(commands=['—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'register'])
def handle_comment(message):
    bot.send_message(message.chat.id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å '–ú—ç—Ä—Ü–∏—à–æ—Ä' –≤–≤–µ–¥–∏—Ç–µ: –ò–º—è, –§–∞–º–∏–ª–∏—é –∏ –∫–ª–∞—Å—Å")
    bot.register_next_step_handler(message, register)

def register(message):
    #us_id = message.from_user.id
    us_name = message.from_user.first_name
    us_sname = message.from_user.last_name
    username = message.from_user.username
    record = message.text
    logging.info(f'{time.asctime()}')
    Datetime = (f'{time.strftime("%d-%m-%y %H:%M:%S")}')
    cursor.execute("INSERT INTO Records (user_name, user_surname, username, Records, datetime) VALUES (?, ?, ?, ?, ?)", (us_name, us_sname, username, record, Datetime))
    bot.send_message(message.chat.id, "–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –º–æ–∂–µ—Ç–µ —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ! ")


#–í–∏–∫–∏–ø–µ–¥–∏—è
def getwiki(s):
    try:
        ny = wikipedia.page(s)
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç—ã—Å—è—á—É —Å–∏–º–≤–æ–ª–æ–≤
        wikitext=ny.content[:1000]
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º
        wikimas=wikitext.split('.')
        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–ï –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        wikimas = wikimas[:-1]
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        wikitext2 = ''
        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –≥–¥–µ –Ω–µ—Ç –∑–Ω–∞–∫–æ–≤ ¬´—Ä–∞–≤–Ω–æ¬ª (—Ç–æ –µ—Å—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        for x in wikimas:
            if not('==' in x):
                    # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫ –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ —Ç–æ—á–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ
                if(len((x.strip()))>3):
                   wikitext2=wikitext2+x+'.'
            else:
                break
        # –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\{[^\{\}]*\}', '', wikitext2)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        return wikitext2
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å –º–æ–¥—É–ª—å wikipedia –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    except Exception as e:
        return '–í —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º'

@bot.message_handler(commands=['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'comment'])
def handle_comment(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    bot.register_next_step_handler(message, handle_text)


def get_sentiment_score(sentence):
    # Define lists of positive and negative words
    positive_words = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∫—Ä–∞—Å–∏–≤—ã–π', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–ª—É—á—à–∏–π', '—Ö–æ—Ä–æ—à–∏–π', '–æ—Ç–ª–∏—á–Ω—ã–π', '–∫—Ä–∞—Å–∏–≤–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–Ω–µ –ø–ª–æ—Ö–æ', '–°–ø–∞—Å–∏–±–æ', '–ö—Ä–∞—Å–∏–≤—ã–π', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–õ—É—á—à–∏–π', '—Ö–æ—Ä–æ—à—É—é', '–æ—Ç–ª–∏—á–Ω—É—é', '–ö—Ä–∞—Å–∏–≤–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω—É—é', '–ù–µ –ø–ª–æ—Ö–æ','–Ω–µ –ø–ª–æ—Ö—É—é']
    negative_words = ['–ø–ª–æ—Ö–æ–π', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '—É–∂–∞—Å–Ω—ã–π', '–Ω–µ –∫—Ä–∞—Å–∏–≤–æ', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–∫—Ä–∏–≤–æ', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '–Ω–∏–∫–æ–≥–¥–∞', '—É–∂–∞—Å']

    # Calculate the number of positive and negative words in the sentence
    num_positive = sum([1 for word in sentence.split() if word.lower() in positive_words])
    num_negative = sum([1 for word in sentence.split() if word.lower() in negative_words])

    # Calculate the sentiment score by subtracting the number of negative words from the number of positive words
    sentiment_score = num_positive - num_negative

    return sentiment_score


def handle_text(message):

    # us_id = message.from_user.id
    us_name = message.from_user.first_name
    us_sname = message.from_user.last_name
    username = message.from_user.username
    record = message.text
    logging.info(f'{time.asctime()}')
    Datetime = (f'{time.strftime("%d-%m-%y %H:%M:%S")}')
    cursor.execute("INSERT INTO Records (user_name, user_surname, username, Records, datetime) VALUES (?, ?, ?, ?, ?)", (us_name, us_sname, username, record, Datetime))
    sentiment_score = get_sentiment_score(message.text)
    if sentiment_score > 0:
        response = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!"
    elif sentiment_score < 0:
        response = "–≠—Ç–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
    else:
        response = "–≠—Ç–æ –Ω–µ–∏—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
    bot.send_message(message.chat.id, response)
  #  bot.send_message(message.chat.id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω: " + message.text)

#–†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
@bot.message_handler(content_types=['text'])
def get_user_text(message):
    us_name = message.from_user.first_name
    us_sname = message.from_user.last_name
    username = message.from_user.username
    record = message.text
    logging.info(f'{time.asctime()}')
    Datetime = (f'{time.strftime("%d-%m-%y %H:%M:%S")}')
    cursor.execute("INSERT INTO Records (user_name, user_surname, username, Records, datetime) VALUES (?, ?, ?, ?, ?)", (us_name, us_sname, username, record, Datetime))

    if message.text == "–∫–∞–∫ –¥–µ–ª–∞?":
        bot.send_message(message.chat.id, message)
    elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç –õ–∏—Ü–µ—è: https://rtlguboglo.edu-cl.net/", parse_mode='html')
    elif message.text == "—Ñ–æ—Ç–æ":
        photo = open('teacers.png', 'rb')
        bot.send_photo(message.chat.id, photo)
    elif message.text == "id":
        bot.send_message(message.chat.id, f"–¢–≤–æ–π ID: {message.from_user.id}", parse_mode='html')
    else:
        bot.send_message(message.chat.id, "–ò—â—É –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏: ")
        bot.send_message(message.chat.id, getwiki(message.text))


@bot.message_handler(content_types=['photo', 'file'])
def get_user_photo(message):
    if message.content_type == 'photo':
        us_name = message.from_user.first_name
        us_sname = message.from_user.last_name
        username = message.from_user.username
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        Photo = bot.download_file(file_path)
        logging.info(f'{time.asctime()}')
        Datetime = (f'{time.strftime("%d-%m-%y %H:%M:%S")}')
        cursor.execute("INSERT INTO Photo (user_name, user_surname, username, Photo, datetime) VALUES (?, ?, ?, ?, ?)", ( us_name, us_sname, username, Photo, Datetime))
        bot.send_message(message.chat.id, '–í–∞—É, –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ!')
    else:
        bot.send_message(message.chat.id, '—Å–∫–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è –≤ –ø–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–µ!')

#–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç—ã –ë–æ—Ç–∞
bot.polling(none_stop=True)
